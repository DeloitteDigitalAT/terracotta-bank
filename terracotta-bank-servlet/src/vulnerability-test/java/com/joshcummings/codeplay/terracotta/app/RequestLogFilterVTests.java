package com.joshcummings.codeplay.terracotta.app;

import org.apache.commons.codec.binary.Base64;
import org.springframework.mock.web.MockHttpSession;
import org.testng.annotations.Test;

import javax.servlet.http.HttpSession;
import java.util.HashMap;
import java.util.Map;

import static org.testng.Assert.assertNotEquals;
import static org.testng.Assert.assertTrue;

public class RequestLogFilterVTests {
	RequestLogFilter filter = new RequestLogFilter();

	@Test
	public void computeSessionIdForLogsThenDoesNotAddRawSessionId() {
		HttpSession session = new MockHttpSession();

		Map<String, Object> attributes = new HashMap<>();
		this.filter.computeSessionIdForLogs(session, attributes);

		assertNotEquals(session.getId(), attributes.get("sessionId"),
				"session id should be hashed before logging");
	}

	@Test
	public void computeSessionIdForLogsThenAddsHashedSessionId() {
		HttpSession session = new MockHttpSession();

		Map<String, Object> attributes = new HashMap<>();
		this.filter.computeSessionIdForLogs(session, attributes);

		String sessionId = (String) attributes.get("sessionId");
		assertTrue(
				isHashedAndBase64Encoded(session.getId(), sessionId, 24) ||
				isHashedAndHexEncoded(session.getId(), sessionId, 32),
				"session id should be hashed and encoded before logging");
	}

	@Test
	public void computeSessionIdForLogsThenAddsFipsCompliantHashedSessionId() {
		HttpSession session = new MockHttpSession();

		Map<String, Object> attributes = new HashMap<>();
		this.filter.computeSessionIdForLogs(session, attributes);

		String sessionId = (String) attributes.get("sessionId");
		assertTrue(
				isHashedAndBase64Encoded(session.getId(), sessionId, 30) ||
				isHashedAndHexEncoded(session.getId(), sessionId, 40),
				"session id should be hashed and encoded before logging");
	}

	private static boolean isHashedAndBase64Encoded
			(String unhashed, String hashed, int lengthMinimum) {
		return Base64.isBase64(hashed) &&
				hashed.length() >= lengthMinimum &&
				!new String(Base64.decodeBase64(hashed)).equals(unhashed);
	}

	private static boolean isHashedAndHexEncoded
			(String unhashed, String hashed, int lengthMinimum) {
		return hashed.matches("[0-9a-fA-F]+") &&
				hashed.length() >= lengthMinimum &&
				!hashed.equals(unhashed);
	}
}
